# File: s12_plot_evaluation_results_vectorized.py (suggested new name)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
from pathlib import Path  # For easier path manipulation

OUTPUT_PLOT_DIR = Path('/home/tj/99_tmp/11 - synthetic mic array data/02_training_data/prediction_results_vectorized/eval_vectorized_20250601_164733')
CSV_FILE_PATH = OUTPUT_PLOT_DIR / 'evaluation_results_vectorized.csv'


print(f"Using CSV file: {CSV_FILE_PATH}")
print(f"Saving plots to: {OUTPUT_PLOT_DIR}")
os.makedirs(OUTPUT_PLOT_DIR, exist_ok=True)

# Define the angle ranges for plotting consistency (visual limits)
AZIMUTH_RANGE_DEGREES = (0, 360)
ELEVATION_RANGE_DEGREES = (-90, 90)

# --- Load the Data ---
try:
    df = pd.read_csv(CSV_FILE_PATH)
    print("CSV loaded successfully. Here's a preview:")
    print(df.head())
    print("\nAvailable columns:", df.columns.tolist())
except FileNotFoundError:
    print(f"Error: CSV file not found at {CSV_FILE_PATH}")
    print("Please ensure the EVAL_RUN_DIR_NAME or manual paths are set correctly.")
    exit()
except Exception as e:
    print(f"Error loading CSV: {e}")
    exit()

# --- Verify expected columns exist ---
required_columns = [
    'true_azimuth_deg', 'true_elevation_deg',
    'pred_azimuth_deg', 'pred_elevation_deg',
    'azimuth_error_deg', 'elevation_error_deg',
    'overall_angular_error_deg'
]
missing_columns = [col for col in required_columns if col not in df.columns]
if missing_columns:
    print(f"\nError: The CSV file is missing the following required columns: {missing_columns}")
    print("Please ensure you are using a CSV generated by 's11_evaluate_cnn_model_vectorized.py'.")
    exit()

print("\nUsing pre-calculated degree values and errors from the CSV.")
print(df[['true_azimuth_deg', 'pred_azimuth_deg', 'azimuth_error_deg',
          'true_elevation_deg', 'pred_elevation_deg', 'elevation_error_deg',
          'overall_angular_error_deg']].head())


# --- Plotting Function (No changes needed here, it already works with degrees) ---
def plot_ground_truth_vs_prediction_with_error_degrees(
        true_values_deg, pred_values_deg, errors_deg,
        angle_range_deg, title, xlabel, ylabel, output_filename
):
    plt.figure(figsize=(10, 8))

    # Ensure inputs are numpy arrays for matplotlib compatibility
    true_values_deg = np.asarray(true_values_deg)
    pred_values_deg = np.asarray(pred_values_deg)
    errors_deg = np.asarray(errors_deg)

    plt.errorbar(
        x=true_values_deg,
        y=pred_values_deg,
        yerr=errors_deg,
        fmt='o',
        ecolor='lightcoral',
        elinewidth=1,
        capsize=3,
        alpha=0.6,
        label='Prediction with Error Margin (Degrees)'
    )

    min_val_plot = angle_range_deg[0] - 0.05 * (angle_range_deg[1] - angle_range_deg[0])
    max_val_plot = angle_range_deg[1] + 0.05 * (angle_range_deg[1] - angle_range_deg[0])

    plt.plot([angle_range_deg[0], angle_range_deg[1]],
             [angle_range_deg[0], angle_range_deg[1]],
             'k--', lw=2, label='Perfect Prediction (y=x)')

    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.xlim(min_val_plot, max_val_plot)
    plt.ylim(min_val_plot, max_val_plot)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend()
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_PLOT_DIR, output_filename))
    print(f"Plot saved to {os.path.join(OUTPUT_PLOT_DIR, output_filename)}")
    # plt.show() # Comment out if running in a script to avoid blocking
    plt.close()


# --- Create Azimuth Plot (Degrees) ---
print("\nGenerating Azimuth plot (Degrees)...")
plot_ground_truth_vs_prediction_with_error_degrees(
    true_values_deg=df['true_azimuth_deg'],
    pred_values_deg=df['pred_azimuth_deg'],
    errors_deg=df['azimuth_error_deg'],  # Using the error column directly
    angle_range_deg=AZIMUTH_RANGE_DEGREES,
    title='Ground Truth Azimuth vs. Predicted Azimuth (Degrees)',
    xlabel='True Azimuth (Degrees)',
    ylabel='Predicted Azimuth (Degrees)',
    output_filename='vectorized_azimuth_gt_vs_pred_error_degrees.png'  # Added prefix
)

# --- Create Elevation Plot (Degrees) ---
print("\nGenerating Elevation plot (Degrees)...")
plot_ground_truth_vs_prediction_with_error_degrees(
    true_values_deg=df['true_elevation_deg'],
    pred_values_deg=df['pred_elevation_deg'],
    errors_deg=df['elevation_error_deg'],  # Using the error column directly
    angle_range_deg=ELEVATION_RANGE_DEGREES,
    title='Ground Truth Elevation vs. Predicted Elevation (Degrees)',
    xlabel='True Elevation (Degrees)',
    ylabel='Predicted Elevation (Degrees)',
    output_filename='vectorized_elevation_gt_vs_pred_error_degrees.png'  # Added prefix
)


# --- Error Distributions in Degrees (Histograms) ---
def plot_error_distribution_degrees(errors_deg, angle_type, output_filename):
    plt.figure(figsize=(8, 6))

    errors_deg_filtered = errors_deg.dropna()  # Handle potential NaNs if any
    if errors_deg_filtered.empty:
        print(f"Warning: No valid data for {angle_type} error distribution. Skipping plot.")
        plt.close()
        return

    plt.hist(errors_deg_filtered, bins=50, color='skyblue', edgecolor='black', alpha=0.7)
    mean_error = errors_deg_filtered.mean()
    median_error = errors_deg_filtered.median()
    std_dev_error = errors_deg_filtered.std()

    plt.axvline(mean_error, color='red', linestyle='dashed', linewidth=2, label=f'Mean Error: {mean_error:.2f}°')
    plt.axvline(median_error, color='green', linestyle='dashed', linewidth=2,
                label=f'Median Error: {median_error:.2f}°')

    title_str = f'Distribution of {angle_type} Error (Degrees)\nMean: {mean_error:.2f}°, Median: {median_error:.2f}°, Std: {std_dev_error:.2f}°'
    plt.title(title_str)
    plt.xlabel(f'{angle_type} Error (Degrees)')
    plt.ylabel('Frequency')
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.savefig(os.path.join(OUTPUT_PLOT_DIR, output_filename))
    print(f"Plot saved to {os.path.join(OUTPUT_PLOT_DIR, output_filename)}")
    # plt.show() # Comment out if running in a script
    plt.close()


print("\nGenerating Azimuth Error Distribution plot (Degrees)...")
plot_error_distribution_degrees(
    errors_deg=df['azimuth_error_deg'],
    angle_type='Azimuth',
    output_filename='vectorized_azimuth_error_distribution_degrees.png'  # Added prefix
)

print("\nGenerating Elevation Error Distribution plot (Degrees)...")
plot_error_distribution_degrees(
    errors_deg=df['elevation_error_deg'],
    angle_type='Elevation',
    output_filename='vectorized_elevation_error_distribution_degrees.png'  # Added prefix
)

print("\nGenerating Overall Angular Error Distribution plot (Degrees)...")
# This now uses the more accurate 'overall_angular_error_deg'
plot_error_distribution_degrees(
    errors_deg=df['overall_angular_error_deg'],
    angle_type='Overall Angular',
    output_filename='vectorized_overall_angular_error_distribution_degrees.png'  # Added prefix
)

print("\nAll plots generated.")